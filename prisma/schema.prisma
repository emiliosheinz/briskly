generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  decks                   Deck[]
  studySessions           StudySession[]
  favorites               Favorite[]
  description             String?
  topics                  Topic[]
  answerValidationReports AnswerValidationReport[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Visibility {
  Public
  Private
  WithLink
}

model Deck {
  id            String         @id @default(cuid())
  title         String
  description   String
  visibility    Visibility     @default(Public)
  ownerId       String
  image         String         @unique
  updatedAt     DateTime       @default(now()) @updatedAt
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  topics        Topic[]
  cards         Card[]
  studySessions StudySession[]
  favorites     Favorite[]
}

model Topic {
  id        String   @id @default(cuid())
  title     String   @unique
  decks     Deck[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  users     User[]
}

model Card {
  id                      String                   @id @default(cuid())
  question                String
  validAnswers            String[]
  deckId                  String
  deck                    Deck                     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt
  studySessionBoxCards    StudySessionBoxCard[]
  isAiPowered             Boolean                  @default(false)
  answerValidationReports AnswerValidationReport[]
}

model AnswerValidationReport {
  id        String   @id @default(cuid())
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model StudySession {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now()) @updatedAt
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  deckId            String
  deck              Deck              @relation(fields: [deckId], references: [id], onDelete: Cascade)
  studySessionBoxes StudySessionBox[]

  @@unique([userId, deckId])
}

model StudySessionBox {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt
  studySessionId       String
  studySession         StudySession          @relation(fields: [studySessionId], references: [id], onDelete: Cascade)
  lastReview           DateTime?
  reviewGapInHours     Int
  nextReview           DateTime
  studySessionBoxCards StudySessionBoxCard[]
}

model StudySessionBoxCard {
  id                   String                @id @default(cuid())
  studySessionBoxId    String
  studySessionBox      StudySessionBox       @relation(fields: [studySessionBoxId], references: [id], onDelete: Cascade)
  cardId               String
  card                 Card                  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  studySessionAttempts StudySessionAttempt[]

  @@unique([studySessionBoxId, cardId])
}

model StudySessionAttempt {
  id                    String              @id @default(cuid())
  answer                String
  isRight               Boolean
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now()) @updatedAt
  studySessionBoxCardId String
  studySessionBoxCard   StudySessionBoxCard @relation(fields: [studySessionBoxCardId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deckId    String
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@unique([userId, deckId])
}
